{"version":3,"sources":["../../contracts/index.js","assets/images/realitio_header_logo.png","assets/images/line_style.png","hooks/useProvider.ts","hooks/useChainId.ts","helpers/network.ts","components/Header/Header.tsx","helpers/reality-eth-contract.ts","components/commons/Box/Box.tsx","components/commons/Spinner/Spinner.tsx","components/Loader/Loader.tsx","components/TemplateBuilder/TemplateBuilderCreate/TemplateBuilderCreate.tsx","hooks/useSigner.ts","components/commons/Select/Select.tsx","components/commons/Input/Input.tsx","components/forms/InstanceForm/InstanceField.tsx","components/commons/Button/Button.tsx","components/commons/LanguageField/LanguageField.tsx","components/forms/DaoModuleTemplateForm/DaoModuleTemplateForm.tsx","components/commons/Textarea/Textarea.tsx","components/forms/CustomTemplateForm/CustomTemplateForm.tsx","components/forms/TemplateForm/TemplateForm.tsx","components/commons/TextBlock/TextBlock.tsx","helpers/validation.ts","components/TemplateBuilder/TemplateBuilderForm/TemplateBuilderForm.tsx","components/TemplateBuilder/TemplateBuilder.tsx","components/TemplateDetails/TemplateDetails.tsx","components/Views.tsx","components/App/App.tsx","index.tsx"],"names":["require","all_config","token_info","chain_info","template_config","chainTokenList","chain_id","ret","t","is_native","native_chains","module","exports","realityETHConfig","token","version","versions","console","log","contract_name","i","length","Error","contract_version","config","arbitrators","version_number","realityETHConfigs","configs","is_latest_found","is_latest","address","realityETHInstance","arbitratorInstance","erc20Instance","abi","token_address","tokenConfig","erc20_chains","chainData","walletAddParameters","params","item","templateConfig","defaultTokenForChain","ethereum","window","getProvider","memoize","ethers","providers","Web3Provider","getDefaultProvider","useProvider","useState","useChainId","provider","network","chainId","setChainId","useEffect","on","labels","getNetworkLabel","Header","label","className","to","src","Logo","alt","style","backgroundImage","DividerImg","REALITY_ETH_ABI_CONTRACT","getRealityETHContract","signer","Contract","Box","title","children","Spinner","Loader","text","template","a","contract","functions","createTemplate","JSON","stringify","request","wait","receipt","newTemplateEvent","events","find","event","args","TemplateBuilderCreate","instance","onClose","onCreate","error","setError","loading","useRef","connected","setConnected","connecting","setConnecting","connect","useCallback","send","useMemo","getSigner","getAddress","then","catch","useSigner","handleError","setTimeout","current","templateId","toNumber","textAlign","Select","value","options","onChange","disabled","props","findIndex","option","index","setIndex","_index","handleSelect","parseInt","classNames","getLabel","e","target","map","Input","input","type","InstanceField","tokensDetails","Object","keys","getRealityETHInstances","substr","setInstance","custom","setCustom","handleChange","_value","some","handleCustomChange","placeholder","currentTarget","onClick","Button","entries","languages","lan","LanguageField","DaoModuleTemplateForm","ENS","setENS","handleENSChange","validateName","err","validate","category","ens","trim","undefined","Textarea","typeOptions","getTypes","isSelect","isInt","parseOutcomes","split","v","filter","CustomTemplateForm","setType","setCategory","setTitle","outcomes","join","setOutcomes","decimals","setDecimals","field","data","evt","handleCategoryChange","isNaN","handleDecimalsChange","_outcomes","handleOutcomesChange","rows","handleTitleChange","TemplateForm","TextBlock","validateTemplateData","isAddress","templateTypeOptions","TemplateBuilderForm","id","lang","onSubmit","isValid","TEMPLATE_TYPES","TemplateBuilder","selectedType","useParams","create","setCreate","language","setLanguage","setTemplateId","templateData","setTemplateData","includes","templateType","setTemplateType","TemplateDetails","history","useHistory","currentChainId","setTemplate","_chainId","isCorrectChain","realityInstance","replace","filters","LogNewTemplate","BigNumber","from","queryFilter","question_text","parse","networkLabel","toLowerCase","Views","path","component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f9f70f9.chunk.js","sourcesContent":["const fs = require('fs');\nconst all_config = require('./generated/contracts.json');\nconst token_info = require('./generated/tokens.json');\nconst chain_info = require('./generated/chains.json');\nconst template_config = require('./config/templates.json');\n\nfunction realityETHInstance(config) {\n    const contract_version = config.contract_version\n    //const abi = JSON.parse(fs.readFileSync('./abi/solc-0.4.25/'+contract_version+'.abi'));\n    //const abi = require('./abi/solc-0.4.25/'+contract_version+'.abi');\n    const abi = require('./abi/solc-0.4.25/RealityETH-all.abi.json');\n    //const bytecode = fs.readFileSync('./bytecode/'+contract_version+'.bin', 'utf8').replace(/\\n/, '');\n//    const bytecode = require('./bytecode/'+contract_version+'.bin');\n    return {\n        \"abi\": abi,\n        \"contractName\": config.contract_name,\n        //\"bytecode\": bytecode,\n        \"address\": config.address,\n        \"chain_id\": config.chain_id\n    };\n    \n}\n\n// TODO: Rename to clarify that there's no address\nfunction arbitratorInstance(chain_id) {\n    const abi = require('./abi/solc-0.4.25/Arbitrator.abi.json');\n    return {\n        \"abi\": abi,\n        \"contractName\": 'Arbitrator',\n        \"chain_id\": chain_id\n    };\n}\n\nfunction erc20Instance(config) {\n    const abi = require('./abi/solc-0.4.25/ERC20.abi.json');\n    if (!config.token_address) {\n        console.log('config', config);\n        throw new Error(\"token address for erc20 instance not found\");\n        return null;\n    }\n    return {\n        \"abi\": abi,\n        \"contractName\": 'ERC20',\n        \"address\": config.token_address,\n        \"chain_id\": config.chain_id\n    };\n}\n\nfunction chainTokenList(chain_id) {\n    let ret = {};\n    for (t in token_info) {\n        if (all_config[\"\"+chain_id][t]) {\n            ret[t] = token_info[t];\n            ret[t].is_native = (token_info[t].native_chains && token_info[t].native_chains[\"\"+chain_id]);\n        }\n    }\n    return ret;\n}\n\nfunction tokenConfig(token, chain_id) {\n    const t = token_info[token];\n    if (!t) {\n        console.log('token not found in token_info');\n        return null;\n    }\n    if (t.native_chains && t.native_chains[chain_id+\"\"]) {\n        t.is_native = true;\n        return t;\n    }\n    if (t.erc20_chains && t.erc20_chains[chain_id+\"\"]) {\n        t.address = t.erc20_chains[chain_id+\"\"];\n        t.is_native = false;\n        return t;\n    }\n    console.log(\"Token config not found for chain\");\n    return null;\n}\n\nfunction realityETHConfig(chain_id, token, version) {\n    const versions = ['2.1', '2.1-rc1', '2.0'];\n    const token_info = chainTokenList(chain_id);\n    if (!token_info[token]) {\n        console.log(\"Token not found for chain\");\n        return null;\n        //throw new Error(\"Token not found for chain\");\n    }\n    const contract_name = token_info[token].is_native ? 'RealityETH' : 'RealityETH_ERC20';\n    // If no version specified, crawl for the latest\n    if (version == null) {\n        for (let i=0; i<versions.length; i++) {\n            if (all_config[\"\"+chain_id][token][contract_name + '-' + versions[i]]) {\n                version = versions[i];\n                break;\n            }\n        }\n        if (!version) {\n            throw new Error(\"Could not find any version for \"+chain_id + \"/\" + token + \"/\" + contract_name);\n        } \n    }\n    //const configf = './networks/'+chain_id+'/'+token+'/'+contract_name+'-'+version+'.json';\n    const contract_version = contract_name + '-' + version;\n    const config = all_config[\"\"+chain_id][token][contract_version];\n    if (!config) {\n        console.log(\"Could not find config for \"+chain_id + \"/\" + token + \"/\" + contract_version);\n        return null;\n        //throw new Error(\"Could not find config for \"+chain_id + \"/\" + token + \"/\" + contract_version);\n    }\n    if (!config.arbitrators) {\n        config.arbitrators = [];\n    }\n    config.version_number = version;\n    config.chain_id = chain_id;\n    config.contract_name = contract_name;\n    config.contract_version = contract_version;\n    return config;\n}\n\nfunction realityETHConfigs(chain_id, token) {\n    let configs = {};\n    const versions = ['2.1', '2.1-rc1', '2.0'];\n    const token_info = chainTokenList(chain_id);\n    if (!token_info[token]) {\n        console.log(\"Token not found for network\");\n        return null;\n        //throw new Error(\"Token not found for network\");\n    }\n    const contract_name = token_info[token].is_native ? 'RealityETH' : 'RealityETH_ERC20';\n    // If no version specified, crawl for the latest\n    let is_latest_found = false;\n    for (let i=0; i<versions.length; i++) {\n        if (all_config[\"\"+chain_id][token][contract_name + '-' + versions[i]]) {\n            const version = versions[i];\n            //const configf = './networks/'+network_id+'/'+token+'/'+contract_name+'-'+version+'.json';\n            const contract_version = contract_name + '-' + version;\n            const config = all_config[\"\"+chain_id][token][contract_version];\n            if (!config) {\n                console.log(\"Could not find config for \"+chain_id+ \"/\" + token + \"/\" + contract_version);\n                return null;\n                //throw new Error(\"Could not find config for \"+network_id + \"/\" + token + \"/\" + contract_version);\n            }\n            if (!config.arbitrators) {\n                config.arbitrators = [];\n            }\n            config.version_number = version;\n            config.chain_id = chain_id;\n            config.contract_name = contract_name;\n            config.contract_version = contract_version;\n            config.is_latest = !is_latest_found;\n            configs[config.address] = config;\n            is_latest_found = true;\n        }\n    }\n    return configs;\n}\n\nfunction chainData(chain_id) {\n    return chain_info[\"\"+chain_id];\n}\n\nfunction walletAddParameters(chain_id) {\n    var params = ['chainId', 'chainName', 'nativeCurrency', 'rpcUrls', 'blockExplorerUrls']\n    var ret = {};\nconsole.log('looking for config for chain', chain_id);\n    var config = chain_info[\"\"+chain_id];\n    for (var i=0; i<params.length; i++) {\n        var item = params[i];\n        ret[item] = config[item];\n    }\n    return ret; \n}\n\nfunction templateConfig() {\n    return template_config;\n}\n\nfunction defaultTokenForChain(chain_id) {\n    // Use the native token if we have one\n    // If not, use the first one\n    const config = all_config[\"\"+chain_id];\n    var ret = null;\n    for (var token in config) {\n        var token_info = chainTokenList(chain_id);\n        if (!token_info) {\n            continue;\n        }\n        if (token_info[token].is_native) {\n            return token;\n        }\n        if (!ret) {\n            ret = token;\n        }\n    }\n    return ret;\n}\n\nmodule.exports.realityETHConfig = realityETHConfig;\nmodule.exports.realityETHConfigs = realityETHConfigs;\nmodule.exports.realityETHInstance = realityETHInstance;\nmodule.exports.arbitratorInstance = arbitratorInstance;\nmodule.exports.erc20Instance = erc20Instance;\nmodule.exports.chainTokenList = chainTokenList;\nmodule.exports.tokenConfig = tokenConfig\nmodule.exports.chainData = chainData;\nmodule.exports.walletAddParameters = walletAddParameters;\nmodule.exports.templateConfig = templateConfig;\nmodule.exports.defaultTokenForChain = defaultTokenForChain;\n","export default __webpack_public_path__ + \"static/media/realitio_header_logo.da16ed6c.png\";","export default __webpack_public_path__ + \"static/media/line_style.d0e8d16f.png\";","import { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport memoize from \"lodash.memoize\";\n\nconst { ethereum } = window as any;\nexport const getProvider = memoize(() => {\n  if (ethereum) {\n    return new ethers.providers.Web3Provider(ethereum, \"any\");\n  }\n  return ethers.getDefaultProvider();\n});\n\nexport const useProvider = () => {\n  const [provider] = useState<\n    ethers.providers.BaseProvider | ethers.providers.Web3Provider\n  >(() => getProvider());\n\n  return provider;\n};\n","import { useEffect, useState } from \"react\";\nimport { useProvider } from \"./useProvider\";\n\nexport function useChainId() {\n  const provider = useProvider();\n  const [chainId, setChainId] = useState(provider.network?.chainId || 1);\n\n  useEffect(() => {\n    provider.on(\"network\", (network) => {\n      setChainId(network.chainId);\n    });\n  }, [provider]);\n\n  return chainId;\n}\n","const labels: Record<number, string> = {\n  1: \"Main Ethereum Network\",\n  4: \"Rinkeby Test Network\",\n  8: \"Ubiq Main Network\",\n  42: \"Kovan Test Network\",\n  56: \"Binance Smart Chain\",\n  77: \"Sokal Network\",\n  100: \"XDAI Network\",\n  137: \"Polygon Main Network (Matic)\",\n  42161: \"Arbitrum One Network\",\n  421611: \"Arbitrum Rinkeby Test Network\",\n  123411710: \"Local Test Network\",\n};\n\nexport function getNetworkLabel(chainId: number) {\n  return labels[chainId] || \"Unknown Test Network\";\n}\n","import React from \"react\";\nimport \"./Header.css\";\nimport Logo from \"../../assets/images/realitio_header_logo.png\";\nimport DividerImg from \"../../assets/images/line_style.png\";\nimport { useChainId } from \"../../hooks/useChainId\";\nimport { getNetworkLabel } from \"../../helpers/network\";\nimport { Link } from \"react-router-dom\";\n\nexport const Header = () => {\n  const chainId = useChainId();\n  const label = getNetworkLabel(chainId);\n\n  return (\n    <div>\n      <header className=\"header-container\">\n        <div className=\"header-logo-container\">\n          <Link to=\"/\">\n            <img src={Logo} alt=\"Logo\" className=\"header-logo\" />\n          </Link>\n          <span className=\"network-text\">{label}</span>\n        </div>\n      </header>\n      <div\n        className=\"divider\"\n        style={{ backgroundImage: `url(${DividerImg})` }}\n      />\n    </div>\n  );\n};\n","import { ethers } from \"ethers\";\n\nconst REALITY_ETH_ABI_CONTRACT = [\n  \"event LogNewTemplate(uint256 indexed template_id, address indexed user, string question_text)\",\n  \"function createTemplate(string content) returns (uint256)\",\n];\n\nexport function getRealityETHContract(\n  address: string,\n  signer: ethers.Signer | ethers.providers.Provider\n) {\n  return new ethers.Contract(address, REALITY_ETH_ABI_CONTRACT, signer);\n}\n","import React from \"react\";\nimport \"./Box.css\";\n\nexport interface BoxProps {\n  title?: string;\n}\n\nexport const Box: React.FC<BoxProps> = ({ title, children }) => {\n  return (\n    <div className=\"box\">\n      {title ? (\n        <div className=\"box-title-container\">\n          <h3 className=\"box-title\">{title}</h3>\n        </div>\n      ) : null}\n      <div className=\"box-content\">{children}</div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./Spinner.css\";\n\nexport function Spinner() {\n  return <div className=\"spinner\" />;\n}\n","import React from \"react\";\nimport \"./Loader.css\";\nimport { Spinner } from \"../commons/Spinner/Spinner\";\nimport { Box, BoxProps } from \"../commons/Box/Box\";\n\ninterface LoaderProps {\n  title?: BoxProps[\"title\"];\n  text?: string;\n}\n\nexport const Loader = ({ title, text }: LoaderProps) => {\n  return (\n    <Box title={title}>\n      <div className=\"center-container\">\n        <div className=\"loader-container\">\n          <Spinner />\n          <span>{text}</span>\n        </div>\n      </div>\n    </Box>\n  );\n};\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport \"./TemplateBuilderCreate.css\";\nimport { useSigner } from \"../../../hooks/useSigner\";\nimport { getRealityETHContract } from \"../../../helpers/reality-eth-contract\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { Box } from \"../../commons/Box/Box\";\nimport { TemplateData } from \"../TemplateBuilder\";\nimport { Loader } from \"../../Loader/Loader\";\n\ninterface TemplateBuilderCreateProps {\n  instance: string;\n  template: TemplateData;\n\n  onClose(): void;\n  onCreate(templateId: number): void;\n}\n\nasync function createTemplate(\n  signer: ethers.Signer,\n  realityETHInstance: string,\n  template: TemplateData\n) {\n  const contract = getRealityETHContract(realityETHInstance, signer);\n\n  const request = await contract.functions.createTemplate(\n    JSON.stringify(template)\n  );\n  const receipt = await request.wait();\n\n  const newTemplateEvent = receipt.events.find(\n    (event: any) => event.event === \"LogNewTemplate\"\n  );\n\n  if (!newTemplateEvent) {\n    throw new Error(\"Transaction did not fired the `LogNewTemplate` event.\");\n  }\n\n  return newTemplateEvent.args[0] as BigNumber; // Template Id\n}\n\nexport function TemplateBuilderCreate({\n  instance,\n  template,\n  onClose,\n  onCreate,\n}: TemplateBuilderCreateProps) {\n  const [error, setError] = useState(false);\n  const loading = useRef(false);\n  const { signer, connected, connect } = useSigner();\n\n  const handleError = useCallback(() => {\n    setError(true);\n    setTimeout(onClose, 3000);\n  }, [onClose]);\n\n  useEffect(() => {\n    if (!signer || !connected) {\n      connect().catch(() => handleError());\n      return;\n    }\n\n    if (!loading.current) {\n      loading.current = true;\n      createTemplate(signer, instance, template)\n        .then((templateId) => onCreate(templateId.toNumber()))\n        .catch(() => handleError());\n    }\n  }, [\n    connect,\n    connected,\n    handleError,\n    instance,\n    loading,\n    onCreate,\n    signer,\n    template,\n  ]);\n\n  if (error) {\n    return (\n      <Box title=\"Creating Template...\">\n        <div className=\"center-container\">\n          <h3 style={{ textAlign: \"center\" }}>Transaction Failed</h3>\n        </div>\n      </Box>\n    );\n  }\n\n  return <Loader title=\"Creating Template...\" text=\"Creating Template...\" />;\n}\n","import { useProvider } from \"./useProvider\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nexport function useSigner() {\n  const provider = useProvider();\n  const [connected, setConnected] = useState(false);\n  const [connecting, setConnecting] = useState(false);\n\n  const connect = useCallback(async () => {\n    if (provider instanceof ethers.providers.Web3Provider) {\n      setConnecting(true);\n      try {\n        await provider.send(\"eth_requestAccounts\", []);\n        setConnected(true);\n      } catch (error) {\n        setConnected(false);\n        throw error;\n      } finally {\n        setConnecting(false);\n      }\n    }\n  }, [provider]);\n\n  const signer = useMemo(() => {\n    if (provider instanceof ethers.providers.Web3Provider) {\n      return provider.getSigner();\n    }\n    return null;\n  }, [provider]);\n\n  useEffect(() => {\n    if (signer) {\n      signer\n        .getAddress()\n        .then(() => setConnected(true))\n        .catch(() => setConnected(false));\n    }\n  }, [signer]);\n\n  return { signer, connected, connect, connecting };\n}\n","import React, { HTMLProps, useEffect, useState } from \"react\";\nimport \"./Select.css\";\nimport classNames from \"classnames\";\n\nexport type Option<T> = { label: string; value: T };\nexport interface SelectProps<T>\n  extends Omit<HTMLProps<HTMLDivElement>, \"value\" | \"onChange\"> {\n  label: string;\n  value?: T;\n  onChange: (value: T) => void;\n  containerProps?: React.HTMLProps<HTMLDivElement>;\n  labelProps?: Omit<React.HTMLProps<HTMLLabelElement>, \"htmlFor\">;\n  options: Option<T>[];\n}\n\nexport function Select<T>({\n  label,\n  value,\n  options,\n  onChange,\n  className,\n  disabled,\n  ...props\n}: SelectProps<T>) {\n  const [index, setIndex] = useState(() =>\n    options.findIndex((option) => option.value === value)\n  );\n\n  useEffect(() => {\n    const _index = options.findIndex((option) => option.value === value);\n    if (index !== _index && value) {\n      setIndex(_index);\n      onChange(value);\n    }\n  }, [index, onChange, options, value]);\n\n  const handleSelect = (index: string) => {\n    const i = parseInt(index);\n    const { value } = options[i];\n    setIndex(i);\n    onChange(value);\n  };\n\n  const getLabel = (index: number) => {\n    const option = options[index];\n    if (!option) return value;\n    return option.label;\n  };\n\n  return (\n    <div\n      {...props}\n      className={classNames(\n        \"custom-select-container\",\n        { \"select-disabled\": disabled },\n        className\n      )}\n    >\n      <span\n        className={classNames(\"custom-select-label\", {\n          \"custom-select-selected\": value,\n        })}\n      >\n        {label}: {value ? getLabel(index) : null}\n      </span>\n      <select\n        disabled={disabled}\n        className=\"custom-select\"\n        value={index}\n        onChange={(e) => handleSelect(e.target.value)}\n      >\n        {options.map((option, index) => (\n          <option key={index} value={index}>\n            {option.label}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./Input.css\";\nimport classNames from \"classnames\";\n\ninterface InputProps extends React.HTMLProps<HTMLInputElement> {\n  error?: string;\n}\n\nexport const Input = ({\n  className,\n  disabled,\n  label,\n  error,\n  ...props\n}: InputProps) => {\n  const input = (\n    <div\n      className={classNames(\n        \"custom-input\",\n        { \"custom-input-disabled\": disabled, \"input-error\": error },\n        className\n      )}\n    >\n      {label ? <span>{label}:</span> : null}\n      <input type=\"text\" disabled={disabled} {...props} />\n    </div>\n  );\n\n  if (error)\n    return (\n      <>\n        {input}\n        <span className=\"custom-input-error-text\">{error}</span>\n      </>\n    );\n\n  return input;\n};\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { Select } from \"../../commons/Select/Select\";\nimport \"./InstanceField.css\";\nimport { Input } from \"../../commons/Input/Input\";\nimport { chainTokenList, realityETHConfig } from \"@reality.eth/contracts\";\nimport { useChainId } from \"../../../hooks/useChainId\";\n\ninterface InstanceFieldProps {\n  disabled?: boolean;\n  value?: string;\n  onChange(address: string): void;\n}\n\nfunction getRealityETHInstances(chain_id: number) {\n  const tokensDetails = chainTokenList(chain_id);\n  const tokens = Object.keys(tokensDetails);\n  return tokens.map((token) => ({\n    ...realityETHConfig(chain_id, token),\n    token,\n  }));\n}\n\nfunction shortAddress(address: string) {\n  return address.substr(0, 8) + \"...\" + address.substr(-3);\n}\n\nexport function InstanceField({\n  onChange,\n  value,\n  disabled,\n}: InstanceFieldProps) {\n  const chainId = useChainId();\n\n  const options = useMemo(() => {\n    const instances = getRealityETHInstances(chainId);\n    return instances.map((instance) => ({\n      label: `${instance.token} - ${shortAddress(instance.address)}`,\n      value: instance.address,\n    }));\n  }, [chainId]);\n\n  const [instance, setInstance] = useState(\n    () => value || (options[0] && options[0].value)\n  );\n  const [custom, setCustom] = useState(false);\n\n  const handleChange = useCallback(\n    (_value: string) => {\n      setInstance(_value);\n      onChange(_value);\n    },\n    [onChange]\n  );\n\n  useEffect(() => {\n    if (options.length) {\n      const exists = options.some((option) => option.value === instance);\n      if (!exists) setInstance(options[0].value);\n    }\n  }, [instance, options]);\n\n  useEffect(() => {\n    if (!value && instance) {\n      onChange(instance);\n    }\n  }, [instance, onChange, value]);\n\n  const handleCustomChange = (custom: boolean) => {\n    setCustom(custom);\n    if (!custom) {\n      setInstance(options[0].value);\n      onChange(options[0].value);\n    }\n  };\n\n  if (custom) {\n    return (\n      <div className=\"instance-field\">\n        <Input\n          disabled={disabled}\n          label=\"Reality Instance\"\n          value={value}\n          placeholder=\"Reality.eth Instance Address (0x123...)\"\n          onChange={(event) => handleChange(event.currentTarget.value)}\n        />\n        {disabled ? null : (\n          <button\n            onClick={() => handleCustomChange(false)}\n            className=\"link-button custom-instance-button\"\n          >\n            Use Default Instance\n          </button>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"instance-field\">\n      <Select\n        disabled={disabled}\n        label=\"Reality Instance\"\n        value={instance}\n        onChange={(instance) => handleChange(instance)}\n        options={options}\n      />\n      {disabled ? null : (\n        <button\n          onClick={() => handleCustomChange(true)}\n          className=\"link-button custom-instance-button\"\n        >\n          Add Custom Instance\n        </button>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./Button.css\";\nimport classNames from \"classnames\";\n\ntype ButtonProps = React.DetailedHTMLProps<\n  React.ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n>;\n\nexport const Button = ({ className, ...props }: ButtonProps) => {\n  return <button className={classNames(\"custom-btn\", className)} {...props} />;\n};\n","import React from \"react\";\nimport { Select, SelectProps } from \"../Select/Select\";\nimport languages from \"./languages.json\";\n\nexport type Language = keyof typeof languages;\n\nconst options = Object.entries(languages).map(([lan, name]) => {\n  return {\n    label: name,\n    value: lan as Language,\n  };\n});\n\ntype LanguageFieldProps = Omit<SelectProps<Language>, \"label\" | \"options\">;\n\nexport function LanguageField(props: LanguageFieldProps) {\n  return <Select label=\"Language\" options={options} {...props} />;\n}\n","import React, { useState } from \"react\";\nimport { Input } from \"../../commons/Input/Input\";\nimport { TemplateFormProps } from \"../TemplateForm/TemplateForm\";\nimport { validateName } from \"@ensdomains/ui/src/utils/index\";\n\nfunction getTitleForDaoModuleTemplate(ens: string) {\n  return (\n    \"Did the Snapshot proposal with the id %s in the \" +\n    `${ens} space pass the execution of the array of Module transactions ` +\n    \"that have the hash 0x%s and does it meet the requirements of the document \" +\n    `referenced in the dao requirements record at ${ens}? The hash is ` +\n    \"the keccak of the concatenation of the individual EIP-712 hashes of \" +\n    \"the Module transactions. If this question was asked before the corresponding \" +\n    \"Snapshot proposal was resolved, it should ALWAYS be resolved to INVALID!\"\n  );\n}\n\nfunction validate(value: string) {\n  try {\n    return validateName(value).length;\n  } catch (err) {\n    return false;\n  }\n}\n\nexport const DaoModuleTemplateForm = ({\n  onChange,\n  disabled,\n}: TemplateFormProps) => {\n  const [ENS, setENS] = useState<string>(\"\");\n  const [error, setError] = useState(false);\n\n  const handleENSChange = (value: string) => {\n    setENS(value);\n    if (!value) {\n      onChange(undefined);\n      setError(false);\n      return;\n    }\n    if (!validate(value)) {\n      onChange(undefined);\n      setError(true);\n      return;\n    }\n    setError(false);\n    onChange({\n      type: \"bool\",\n      category: \"DAO proposal\",\n      title: getTitleForDaoModuleTemplate(value.trim()),\n    });\n  };\n\n  return (\n    <Input\n      disabled={disabled}\n      value={ENS}\n      error={error ? \"Invalid ENS\" : \"\"}\n      className={\"input-space\"}\n      placeholder=\"ENS Name\"\n      onChange={(event) => handleENSChange(event.currentTarget.value)}\n    />\n  );\n};\n","import React from \"react\";\nimport \"./Textarea.css\";\n\nexport const Textarea = ({\n  className,\n  ...props\n}: React.HTMLProps<HTMLTextAreaElement>) => {\n  return <textarea {...props} className={`custom-textarea ${className}`} />;\n};\n","import React, { useState } from \"react\";\nimport { Option, Select } from \"../../commons/Select/Select\";\nimport { Textarea } from \"../../commons/Textarea/Textarea\";\nimport { TemplateData, Type } from \"../../TemplateBuilder/TemplateBuilder\";\nimport { TemplateFormProps } from \"../TemplateForm/TemplateForm\";\nimport { Input } from \"../../commons/Input/Input\";\n\nconst typeOptions: Option<Type>[] = [\n  { value: \"bool\", label: \"Bool\" },\n  { value: \"uint\", label: \"Uint\" },\n  { value: \"datetime\", label: \"Date/Time\" },\n  { value: \"single-select\", label: \"Single Select\" },\n  { value: \"multiple-select\", label: \"Multiple Select\" },\n];\n\ntype PartialTemplateData = Omit<TemplateData, \"lang\">;\n\nexport function getTypes(type: string) {\n  return {\n    isSelect: type === \"single-select\" || type === \"multiple-select\",\n    isInt: type === \"uint\",\n  };\n}\n\nfunction parseOutcomes(value: string): string[] {\n  return value.trim()\n    ? value\n        .split(\",\")\n        .map((v) => v.trim())\n        .filter((v) => v)\n    : [];\n}\n\nexport const CustomTemplateForm = ({\n  onChange,\n  disabled,\n  template,\n}: TemplateFormProps) => {\n  const [type, setType] = useState<Type>(template?.type || \"bool\");\n  const [category, setCategory] = useState(template?.category || \"\");\n  const [title, setTitle] = useState(template?.title || \"\");\n  const [outcomes, setOutcomes] = useState<string>(\n    template?.outcomes?.join(\",\") || \"\"\n  );\n  const [decimals, setDecimals] = useState<number>(template?.decimals || 18);\n\n  const handleChange = (field: keyof PartialTemplateData, value: any) => {\n    const _type = field === \"type\" ? value : type;\n    const { isInt, isSelect } = getTypes(_type);\n\n    const data: PartialTemplateData = {\n      ...template,\n      type,\n      category,\n      title,\n      outcomes: isSelect ? parseOutcomes(outcomes) : undefined,\n      decimals: isInt ? decimals : undefined,\n      [field]: value,\n    };\n    onChange(data);\n  };\n\n  const handleCategoryChange = (category: string) => {\n    setCategory(category);\n    handleChange(\"category\", category);\n  };\n\n  const handleTypeChange = (type: Type) => {\n    setType(type);\n    handleChange(\"type\", type);\n  };\n\n  const handleTitleChange = (title: string) => {\n    setTitle(title);\n    handleChange(\"title\", title);\n  };\n\n  const handleDecimalsChange = (value: string) => {\n    const decimals = parseInt(value);\n    if (isNaN(decimals)) return;\n    setDecimals(decimals);\n    handleChange(\"decimals\", decimals);\n  };\n\n  const handleOutcomesChange = (value: string) => {\n    setOutcomes(value);\n    const _outcomes = parseOutcomes(value);\n    handleChange(\"outcomes\", _outcomes);\n  };\n\n  const { isInt, isSelect } = getTypes(type);\n\n  return (\n    <>\n      <Input\n        disabled={disabled}\n        label=\"Category\"\n        value={category}\n        onChange={(evt) => handleCategoryChange(evt.currentTarget.value)}\n        className=\"input-space\"\n      />\n      <Select\n        disabled={disabled}\n        label=\"Type\"\n        value={type}\n        onChange={handleTypeChange}\n        options={typeOptions}\n        className=\"input-space\"\n      />\n\n      {isInt ? (\n        <Input\n          disabled={disabled}\n          label=\"Decimals\"\n          value={decimals}\n          onChange={(evt) => handleDecimalsChange(evt.currentTarget.value)}\n          className=\"input-space\"\n        />\n      ) : null}\n      {isSelect ? (\n        <Input\n          disabled={disabled}\n          label=\"Outcomes\"\n          value={outcomes}\n          onChange={(evt) => handleOutcomesChange(evt.currentTarget.value)}\n          className=\"input-space\"\n        />\n      ) : null}\n\n      <Textarea\n        disabled={disabled}\n        value={title}\n        rows={5}\n        className=\"input-space\"\n        placeholder=\"Did the Olympian with the name %s win gold?\"\n        onChange={(evt) => handleTitleChange(evt.currentTarget.value)}\n      />\n    </>\n  );\n};\n","import React from \"react\";\nimport {\n  TemplateData,\n  TemplateType,\n} from \"../../TemplateBuilder/TemplateBuilder\";\nimport { DaoModuleTemplateForm } from \"../DaoModuleTemplateForm/DaoModuleTemplateForm\";\nimport { CustomTemplateForm } from \"../CustomTemplateForm/CustomTemplateForm\";\n\nexport interface TemplateFormProps {\n  disabled?: boolean;\n  type: TemplateType;\n  template?: TemplateData;\n  onChange(form?: Omit<TemplateData, \"lang\">): void;\n}\n\nexport function TemplateForm(props: TemplateFormProps) {\n  if (props.type === \"daoModule\") return <DaoModuleTemplateForm {...props} />;\n\n  return <CustomTemplateForm {...props} />;\n}\n","import React from \"react\";\nimport \"./TextBlock.css\";\nimport classNames from \"classnames\";\nimport { HTMLProps } from \"react\";\n\ntype TextBlockProps = HTMLProps<HTMLDivElement>;\n\nexport function TextBlock({ className, ...props }: TextBlockProps) {\n  return <div className={classNames(\"text-block\", className)} {...props} />;\n}\n","import { TemplateData } from \"../components/TemplateBuilder/TemplateBuilder\";\nimport { isAddress } from \"ethers/lib/utils\";\nimport { getTypes } from \"../components/forms/CustomTemplateForm/CustomTemplateForm\";\n\nexport function validateTemplateData(\n  instance?: string,\n  template?: TemplateData\n): boolean {\n  if (\n    !(\n      instance &&\n      isAddress(instance) &&\n      template &&\n      template.type &&\n      template.category &&\n      template.title\n    )\n  )\n    return false;\n\n  const { isInt, isSelect } = getTypes(template.type);\n\n  if (isInt) {\n    return !!(template?.decimals && !isNaN(template.decimals));\n  }\n\n  if (isSelect) {\n    return !!template?.outcomes?.length;\n  }\n\n  return true;\n}\n","import React, { useCallback } from \"react\";\nimport { Box } from \"../../commons/Box/Box\";\nimport \"./TemplateBuilderForm.css\";\nimport { Option, Select } from \"../../commons/Select/Select\";\nimport { InstanceField } from \"../../forms/InstanceForm/InstanceField\";\nimport { Button } from \"../../commons/Button/Button\";\nimport {\n  Language,\n  LanguageField,\n} from \"../../commons/LanguageField/LanguageField\";\nimport { TemplateForm } from \"../../forms/TemplateForm/TemplateForm\";\nimport { TextBlock } from \"../../commons/TextBlock/TextBlock\";\nimport { TemplateData, TemplateType } from \"../TemplateBuilder\";\nimport { validateTemplateData } from \"../../../helpers/validation\";\n\nexport type TemplateBuilderFormFields =\n  | \"instance\"\n  | \"language\"\n  | \"type\"\n  | \"template\";\n\nconst templateTypeOptions: Option<TemplateType>[] = [\n  { label: \"Custom\", value: \"custom\" },\n  { label: \"DAO Module\", value: \"daoModule\" },\n];\n\ninterface TemplateBuilderFormProps {\n  id?: number;\n  lang?: Language;\n  instance?: string;\n  template?: TemplateData;\n  type?: TemplateType;\n\n  onChange?(field: TemplateBuilderFormFields, value: any): void;\n  onSubmit?(): void;\n}\n\nexport const TemplateBuilderForm = ({\n  id,\n  lang,\n  type = \"custom\",\n  instance,\n  template,\n  onChange,\n  onSubmit,\n}: TemplateBuilderFormProps) => {\n  const disabled = id !== undefined;\n  const title = disabled ? `Template: ${id}` : \"Template Builder\";\n  const isValid = validateTemplateData(instance, template);\n\n  const handleChange = useCallback(\n    (field: TemplateBuilderFormFields) => (value: any) => {\n      if (onChange) onChange(field, value);\n    },\n    [onChange]\n  );\n\n  return (\n    <Box title={title}>\n      <div className=\"template-builder-content\">\n        <InstanceField\n          disabled={disabled}\n          value={instance}\n          onChange={handleChange(\"instance\")}\n        />\n        <Select\n          disabled={disabled}\n          label=\"Template Type\"\n          value={type}\n          onChange={handleChange(\"type\")}\n          options={templateTypeOptions}\n          className=\"input-space\"\n        />\n\n        <LanguageField\n          disabled={disabled}\n          value={lang || template?.lang}\n          onChange={handleChange(\"language\")}\n          className=\"input-space\"\n        />\n\n        <TemplateForm\n          disabled={disabled}\n          type={type}\n          template={template}\n          onChange={handleChange(\"template\")}\n        />\n\n        {template && isValid ? (\n          <TextBlock className=\"input-space\">\n            {JSON.stringify(template, undefined, 4)}\n          </TextBlock>\n        ) : null}\n\n        {disabled ? null : (\n          <Button\n            disabled={!isValid}\n            onClick={onSubmit}\n            className=\"input-space\"\n          >\n            Create Template\n          </Button>\n        )}\n      </div>\n    </Box>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Language } from \"../commons/LanguageField/LanguageField\";\nimport { base_ids } from \"@reality.eth/contracts/config/templates.json\";\nimport { TemplateBuilderCreate } from \"./TemplateBuilderCreate/TemplateBuilderCreate\";\nimport {\n  TemplateBuilderForm,\n  TemplateBuilderFormFields,\n} from \"./TemplateBuilderForm/TemplateBuilderForm\";\nimport { validateTemplateData } from \"../../helpers/validation\";\nimport { useParams } from \"react-router-dom\";\n\nexport type TemplateType = \"custom\" | \"daoModule\";\nexport const TEMPLATE_TYPES: TemplateType[] = [\"custom\", \"daoModule\"];\n\nexport type Type = keyof typeof base_ids;\n\nexport interface TemplateData {\n  type: Type;\n  title: string;\n  category: string;\n  lang: Language;\n\n  decimals?: number;\n  outcomes?: string[];\n}\n\nfunction isTemplateType(type: string): type is TemplateType {\n  return TEMPLATE_TYPES.includes(type as TemplateType);\n}\n\nexport const TemplateBuilder = () => {\n  const { type: selectedType } = useParams<{ type: string }>();\n\n  const [create, setCreate] = useState(false);\n  const [instance, setInstance] = useState<string>();\n  const [language, setLanguage] = useState<Language>(\"en\");\n  const [templateId, setTemplateId] = useState<number>();\n  const [templateData, setTemplateData] = useState<TemplateData>();\n  const [templateType, setTemplateType] = useState<TemplateType>(() => {\n    if (selectedType && isTemplateType(selectedType)) return selectedType;\n    return \"custom\";\n  });\n\n  const handleFormData = (data?: Omit<TemplateData, \"lang\">) => {\n    if (!data) {\n      setTemplateData(undefined);\n      return;\n    }\n    setTemplateData({ lang: language, ...data });\n  };\n  const handleClose = () => {\n    setCreate(false);\n    setTemplateData(undefined);\n  };\n  const handleCreation = (templateId: number) => {\n    setTemplateType(\"custom\");\n    setTemplateId(templateId);\n  };\n  const handleSubmit = () => {\n    if (!validateTemplateData(instance, templateData)) {\n      return;\n    }\n    setCreate(true);\n  };\n\n  const handleChange = (field: TemplateBuilderFormFields, value: any) => {\n    switch (field) {\n      case \"instance\":\n        setInstance(value);\n        break;\n      case \"type\":\n        setTemplateType(value);\n        setTemplateData(undefined);\n        break;\n      case \"language\":\n        setLanguage(value);\n        if (templateData) {\n          const template = { ...templateData };\n          template.lang = value; // Avoid changing fields order.\n          setTemplateData(template);\n        }\n        break;\n      case \"template\":\n        handleFormData(value);\n        break;\n    }\n  };\n\n  if (instance && templateData && create && !templateId) {\n    return (\n      <TemplateBuilderCreate\n        instance={instance}\n        template={templateData}\n        onClose={handleClose}\n        onCreate={handleCreation}\n      />\n    );\n  }\n\n  return (\n    <TemplateBuilderForm\n      id={templateId}\n      lang={language}\n      type={templateType}\n      instance={instance}\n      template={templateData}\n      onSubmit={handleSubmit}\n      onChange={handleChange}\n    />\n  );\n};\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { realityETHConfig } from \"@reality.eth/contracts\";\nimport { Loader } from \"../Loader/Loader\";\nimport { useChainId } from \"../../hooks/useChainId\";\nimport { getNetworkLabel } from \"../../helpers/network\";\nimport { getRealityETHContract } from \"../../helpers/reality-eth-contract\";\nimport { useProvider } from \"../../hooks/useProvider\";\nimport { BigNumber } from \"ethers\";\nimport { TemplateData } from \"../TemplateBuilder/TemplateBuilder\";\nimport { TemplateBuilderForm } from \"../TemplateBuilder/TemplateBuilderForm/TemplateBuilderForm\";\n\ninterface TemplateDetailsParams {\n  id: string;\n  chainId: string;\n  token: string;\n}\n\nexport function TemplateDetails() {\n  const history = useHistory();\n  const provider = useProvider();\n  const currentChainId = useChainId();\n  const [template, setTemplate] = useState<TemplateData>();\n\n  const { id, token, chainId: _chainId } = useParams<TemplateDetailsParams>();\n  const chainId = parseInt(_chainId);\n\n  const isCorrectChain = chainId === currentChainId;\n\n  const realityInstance = useMemo(() => {\n    try {\n      return realityETHConfig(chainId, token);\n    } catch (err) {\n      return undefined;\n    }\n  }, [chainId, token]);\n\n  useEffect(() => {\n    if (isNaN(parseInt(id)) || !realityInstance) {\n      history.replace(\"/\");\n    }\n  }, [history, id, realityInstance]);\n\n  useEffect(() => {\n    if (isCorrectChain && realityInstance) {\n      const contract = getRealityETHContract(realityInstance.address, provider);\n      const filters = contract.filters.LogNewTemplate(BigNumber.from(id));\n      contract\n        .queryFilter(filters)\n        .then((events) => {\n          if (!events.length) {\n            history.replace(\"/\");\n            return;\n          }\n          let { question_text } = events[0].args as any;\n          question_text = question_text.replace(\n            '\"outcomes\": [%s]',\n            '\"outcomes\": [\"%s\"]'\n          ); // Special Case for Default Cases\n          const template = JSON.parse(question_text) as TemplateData;\n          setTemplate(template);\n        })\n        .catch(() => history.replace(\"/\"));\n    }\n  }, [\n    id,\n    history,\n    chainId,\n    provider,\n    currentChainId,\n    isCorrectChain,\n    realityInstance,\n  ]);\n\n  if (!isCorrectChain) {\n    const networkLabel = getNetworkLabel(chainId).toLowerCase();\n    return (\n      <Loader\n        text={`Please change your current network to the ${networkLabel}`}\n      />\n    );\n  }\n\n  if (template) {\n    return <TemplateBuilderForm id={parseInt(id)} template={template} />;\n  }\n\n  return <Loader />;\n}\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { TemplateBuilder } from \"./TemplateBuilder/TemplateBuilder\";\nimport { TemplateDetails } from \"./TemplateDetails/TemplateDetails\";\n\nexport function Views() {\n  return (\n    <Switch>\n      <Route path=\"/template/:chainId/:token/:id\" component={TemplateDetails} />\n      <Route path=\"/type/:type\" component={TemplateBuilder} />\n      <Route path=\"/\" component={TemplateBuilder} />\n    </Switch>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Header } from \"../Header/Header\";\nimport { Views } from \"../Views\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"app-container\">\n        <Header />\n        <Views />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}